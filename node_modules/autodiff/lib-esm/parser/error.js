var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
export var ERROR_NAME_PARSER = 'ParserError';
var ParserError = (function (_super) {
    __extends(ParserError, _super);
    function ParserError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = ERROR_NAME_PARSER;
        return _this;
    }
    return ParserError;
}(Error));
export { ParserError };
export function isParserError(err) {
    return err.name === ERROR_NAME_PARSER;
}
export var ErrorMsg;
(function (ErrorMsg) {
    ErrorMsg.genericFailure = "Couldn't parse that expression";
    ErrorMsg.emptyParens = "The expression contains an empty set of parentheses like (); this is not valid syntax";
    ErrorMsg.missingRightParen = "The expression is missing a right parenthesis";
    ErrorMsg.nonIdentifierFunctionName = "It looks like you're trying to call something that isn't a function";
    ErrorMsg.invalidArgument = function (functionName) {
        return "Couldn't parse an argument to the function " + functionName + ". Perhaps you're missing a closing parenthesis.";
    };
    ErrorMsg.operatorMissingRightOperand = function (operator) {
        return "We expected something after the operator " + operator;
    };
    ErrorMsg.invalidCharacter = function (s) {
        return s + " isn't a valid character";
    };
})(ErrorMsg || (ErrorMsg = {}));
