import { Token } from './tokenizer';
export declare enum NodeType {
    FUNCTION_CALL = 0,
    IDENTIFIER = 1,
    LITERAL = 2,
    PREFIX_OPERATOR = 3,
    BINARY_OPERATOR = 4,
    GROUP = 5,
}
export interface FunctionCall {
    type: NodeType.FUNCTION_CALL;
    token: Token;
    function: Identifier;
    argument: Node;
}
export interface Identifier {
    type: NodeType.IDENTIFIER;
    token: Token;
}
export interface Literal {
    type: NodeType.LITERAL;
    token: Token;
}
export interface PrefixOperator {
    type: NodeType.PREFIX_OPERATOR;
    token: Token;
    argument: Node;
}
export interface BinaryOperator {
    type: NodeType.BINARY_OPERATOR;
    token: Token;
    firstArgument: Node;
    secondArgument: Node;
}
export interface Group {
    type: NodeType.GROUP;
    token: Token;
    argument: Node;
}
export declare type Node = FunctionCall | Identifier | Literal | PrefixOperator | BinaryOperator | Group;
export declare function children(node: Node): Node[];
export declare function toDebugString(node: Node): string;
export declare function forEachNode(node: Node, callback: (node: Node) => void): void;
export interface ParsedExpression {
    expression: Node;
    userReadableError: string;
}
export declare function parseExpression(source: string): ParsedExpression;
