var Pool = (function () {
    function Pool(_newT, _clearT, _copyT) {
        this._newT = _newT;
        this._clearT = _clearT;
        this._copyT = _copyT;
        this._free = [];
        this._trackedAllocations = null;
    }
    Pool.prototype.trackAndReleaseAllocations = function (callback) {
        this._trackedAllocations = [];
        callback();
        for (var i = 0; i < this._trackedAllocations.length; i++) {
            if (!this._trackedAllocations[i].isFree) {
                this.markFree(this._trackedAllocations[i]);
            }
        }
        this._trackedAllocations = null;
    };
    Pool.prototype.allocate = function () {
        var res = null;
        if (this._free.length > 0) {
            res = this._free.pop();
            this._clearT(res);
        }
        else {
            res = this._newT();
        }
        if (this._trackedAllocations) {
            this._trackedAllocations.push(res);
        }
        res.isFree = false;
        return res;
    };
    Pool.prototype.allocateCopy = function (s) {
        var copy = this.allocate();
        this._copyT(copy, s);
        copy.isFree = false;
        return copy;
    };
    Pool.prototype.markFree = function (series) {
        series.isFree = true;
        this._free.push(series);
    };
    Pool.prototype.forgetFreeElements = function () {
        this._free = [];
    };
    return Pool;
}());
export { Pool };
