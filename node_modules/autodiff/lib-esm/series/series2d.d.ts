export declare function xEvaluatedAtPoint(value: number): Series2D;
export declare function yEvaluatedAtPoint(value: number): Series2D;
export declare function constantValue(value: number): Series2D;
export declare class Series2D {
    isFree: boolean;
    coefficients: number[];
    size: number;
    constructor();
    set(x: number, y: number, value: number): void;
    get(x: number, y: number): number;
    debugPrint(): void;
    freeToPool(): void;
}
export declare function toValueAndDerivatives(s: Series2D): number[];
export declare type Series2DOrNumber = Series2D | number;
export declare function add(a: Series2DOrNumber, b: Series2DOrNumber): Series2D;
export declare function negative(a: Series2DOrNumber): Series2D;
export declare function subtract(a: Series2DOrNumber, b: Series2DOrNumber): Series2D;
export declare function convolve(a: Series2D, b: Series2D, boxWidth: number, boxHeight: number): number;
export declare function dConvolve(a: Series2D, b: Series2D, k_x: number, k_y: number): number;
export declare function multiply(a: Series2DOrNumber, b: Series2DOrNumber): Series2D;
export declare function divide(a: Series2DOrNumber, b: Series2DOrNumber): Series2D;
export declare function exp(a: Series2DOrNumber): Series2D;
export declare function log(a: Series2DOrNumber): Series2D;
export declare function sqrt(a: Series2DOrNumber): Series2D;
export declare function pow(a: Series2DOrNumber, b: Series2DOrNumber): Series2D;
export declare function sin(a: Series2DOrNumber): Series2D;
export declare function cos(a: Series2DOrNumber): Series2D;
export declare function tan(a: Series2DOrNumber): Series2D;
export declare function asin(a: Series2DOrNumber): Series2D;
export declare function acos(a: Series2DOrNumber): Series2D;
export declare function atan(a: Series2DOrNumber): Series2D;
