"use strict";
// This files contains functions for numeric operations on lists.
exports.__esModule = true;
function throwUnlessEqualLength(a, b) {
    if (a.length !== b.length) {
        throw new Error('Lists are of different lengths');
    }
}
function logErrorIfNaN(a) {
    for (var i = 0; i < a.length; i++) {
        if (isNaN(a[i])) {
            console.error("autodiff.js has encountered NaN's in computation; this is probably not what you want and is due to some invalid math operation, like taking asin(1000) or raising something to a negative power which is not yet supported");
        }
    }
}
exports.logErrorIfNaN = logErrorIfNaN;
function add(a, b) {
    throwUnlessEqualLength(a, b);
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] += b[i];
    }
    return aCopy;
}
exports.add = add;
function subtract(a, b) {
    throwUnlessEqualLength(a, b);
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] -= b[i];
    }
    return aCopy;
}
exports.subtract = subtract;
function multiply(a, b) {
    throwUnlessEqualLength(a, b);
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] *= b[i];
    }
    return aCopy;
}
exports.multiply = multiply;
function divide(a, b) {
    throwUnlessEqualLength(a, b);
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] /= b[i];
    }
    return aCopy;
}
exports.divide = divide;
function addScalar(a, b) {
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] += b;
    }
    return aCopy;
}
exports.addScalar = addScalar;
function subtractScalar(a, b) {
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] -= b;
    }
    return aCopy;
}
exports.subtractScalar = subtractScalar;
function multiplyScalar(a, b) {
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] *= b;
    }
    return aCopy;
}
exports.multiplyScalar = multiplyScalar;
function divideScalar(a, b) {
    var aCopy = a.slice();
    for (var i = 0; i < aCopy.length; i++) {
        aCopy[i] /= b;
    }
    return aCopy;
}
exports.divideScalar = divideScalar;
function negative(a) {
    var copy = a.slice();
    for (var i = 0; i < copy.length; i++) {
        i *= -1;
    }
    return copy;
}
exports.negative = negative;
//# sourceMappingURL=list.js.map