import { Token, TokenType } from './tokenizer';
import { ParserContext } from './parser-context';
import { Node } from './expression-parser';
export declare enum Precedence {
    LOWEST = 0,
    SUM = 1,
    PRODUCT = 2,
    EXPONENT = 3,
    PREFIX = 4,
    CALL = 5,
}
export interface PrefixParse {
    (parser: ExpressionParser, token: Token): Node;
}
export interface InfixParse {
    (parser: ExpressionParser, left: Node, token: Token): Node;
}
export interface Parselet {
    prefixParse?: PrefixParse | null;
    infixPrecedence?: Precedence | null;
    infixParse?: InfixParse | null;
}
export declare class ExpressionParser {
    private _ctx;
    private _parselets;
    constructor(_ctx: ParserContext);
    registerParseletPrefix(tokenType: TokenType, prefixParse: PrefixParse): void;
    registerParseletInfix(tokenType: TokenType, infixPrecedence: Precedence, infixParse: InfixParse): void;
    registerTerminal(tokenType: TokenType, createNode: (token: Token) => Node): void;
    registerPrefixUnaryOperator(tokenType: TokenType): void;
    registerInfixBinaryOperator(tokenType: TokenType, precedence: Precedence): void;
    getParselet(tokenType: TokenType, infixPrecedence?: Precedence | null): Parselet;
    peek(): Token;
    consumeIfPresent(tokenType: TokenType): boolean;
    private peekTokenPrecedence();
    parseExpression(precedence: number): Node | null;
}
